{"version":3,"sources":["../../../graphql/schema/index.js"],"names":["jwtSecret","process","env","JWT_SECRET","RequireAuthDirective","SchemaDirectiveVisitor","visitFieldDefinition","field","resolve","defaultFieldResolver","role","args","ctx","req","headers","authorization","token","decoded","split","jwt","verify","e","AuthenticationError","user","userModel","findById","id","includes","result","apply","Auth","gql","Query","Mutation","resolvers","status","typeDefs","fs","readdirSync","__dirname","filter","dir","indexOf","forEach","tmp","require","path","join","default","push","types","schema","ApolloServer","schemaDirectives","requireAuth","context"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport {\n  ApolloServer, gql,\n  SchemaDirectiveVisitor,\n  AuthenticationError\n} from 'apollo-server-express';\nimport { merge } from 'lodash';\n\nimport jwt from 'jsonwebtoken';\nimport userModel from './user/_model';\n\nconst jwtSecret = process.env.JWT_SECRET;\n\nclass RequireAuthDirective extends SchemaDirectiveVisitor {\n  visitFieldDefinition(field) {\n    const { resolve = defaultFieldResolver } = field;\n    const { role } = this.args;\n    field.resolve = async function(...args) {\n      const [, , ctx] = args;\n      if (ctx.req && ctx.req.headers.authorization) {\n        let token;\n        let decoded;\n        try {\n          token = ctx.req.headers.authorization.split(\" \")[1];\n          decoded = jwt.verify(token, jwtSecret);\n        } catch(e) {\n          throw new AuthenticationError(\n            \"You must be signed in to view this resource.\"\n          );\n        }\n        const user = await userModel.findById(decoded.id);\n        if (role && (!user.role || !user.role.includes(role))) {\n          throw new AuthenticationError(\n            \"You are not authorized to view this resource.\"\n          );\n        } else {\n          const result = await resolve.apply(this, args);\n          return result;\n        }\n      } else {\n        throw new AuthenticationError(\n          \"You must be signed in to view this resource.\"\n        );\n      }\n    };\n  }\n}\n\nconst Auth = gql`\n  directive @requireAuth(role: Role) on FIELD_DEFINITION\n  enum Role {\n    ADMIN\n    USER\n  }\n`;\n\nconst Query = gql`\n  type Query {\n    status: String\n  }\n`;\n\nconst Mutation = gql`\n  type Mutation {\n    _empty: String\n  }\n`;\n\nlet resolvers = {\n  Query: {\n    status: () => 'ok'\n  }\n};\n\nconst typeDefs = [Query, Mutation, Auth];\n\n// read the current directory and load types and resolvers automatically\nfs.readdirSync(__dirname)\n  .filter(dir => (dir.indexOf('.') < 0))\n  .forEach(dir => {\n    const tmp = require(path.join(__dirname, dir)).default;\n    resolvers = merge(resolvers, tmp.resolvers);\n    typeDefs.push(tmp.types);\n  });\n\nconst schema = new ApolloServer({\n  typeDefs,\n  resolvers,\n  schemaDirectives: {\n    requireAuth: RequireAuthDirective\n  },\n  context: ({ req }) => ({ req })\n});\n\nexport default schema;\n"],"file":"index.js"}