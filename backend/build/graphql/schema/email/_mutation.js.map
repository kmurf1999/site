{"version":3,"sources":["../../../../graphql/schema/email/_mutation.js"],"names":["hostEmail","process","env","EMAIL_AUTH_USER","Mutation","gql","mutationTypes","mutationResolvers","sendEmail","_","from","name","message","Error","messageConfig","to","subject","body","html","email","emailModel","transporter","sendMail","err","info","toGraph"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAA9B;AAEA,MAAMC,QAAQ,GAAGC,wBAAI;;;;CAArB;;AAMO,MAAMC,aAAa,GAAG,MAAM,CAACF,QAAD,CAA5B;;;AAEA,MAAMG,iBAAiB,GAAG;AAC/BH,EAAAA,QAAQ,EAAE;AACRI,IAAAA,SAAS,EAAE,OAAOC,CAAP,EAAU;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA;AAAd,KAAV,KAAsC;AAC/C,UAAI,CAACF,IAAL,EAAW,MAAM,IAAIG,KAAJ,CAAU,UAAV,CAAN;AACX,UAAI,CAACD,OAAL,EAAc,MAAM,IAAIC,KAAJ,CAAU,YAAV,CAAN;AACd,UAAI,OAAOF,IAAP,KAAgB,WAApB,EAAiCA,IAAI,GAAG,EAAP;AAEjC,YAAMG,aAAa,GAAG;AACpBC,QAAAA,EAAE,EAAE,qBADgB;AAEpBL,QAAAA,IAAI,EAAEV,SAFc;AAGpBgB,QAAAA,OAAO,EAAG,mBAAkBL,IAAK,MAAKD,IAAK,EAHvB;AAIpBO,QAAAA,IAAI,EAAEL,OAJc;AAKpBM,QAAAA,IAAI,EAAG,MAAKN,OAAQ;AALA,OAAtB;AAQA,YAAMO,KAAK,GAAG,MAAM,IAAIC,cAAJ,CAAe;AACjCV,QAAAA,IADiC;AAEjCK,QAAAA,EAAE,EAAED,aAAa,CAACJ,IAFe;AAGjCM,QAAAA,OAAO,EAAEF,aAAa,CAACE,OAHU;AAIjCL,QAAAA,IAJiC;AAKjCC,QAAAA;AALiC,OAAf,CAApB;AAQA,YAAMS,gBAAYC,QAAZ,CAAqBR,aAArB,EAAoC,CAACS,GAAD,EAAMC,IAAN,KAAe;AACvD,YAAID,GAAJ,EAAS,MAAM,IAAIV,KAAJ,CAAU,sBAAV,CAAN;AACV,OAFK,CAAN;AAIA,aAAOM,KAAK,CAACM,OAAN,EAAP;AACD;AA3BO;AADqB,CAA1B","sourcesContent":["import { gql } from 'apollo-server-express';\n\nimport transporter from '../../../mailer';\nimport emailModel from './_model';\n\nconst hostEmail = process.env.EMAIL_AUTH_USER;\n\nconst Mutation = gql`\n  extend type Mutation {\n    sendEmail(name: String!, from: String!, message: String!): Email\n  }\n`;\n\nexport const mutationTypes = () => [Mutation];\n\nexport const mutationResolvers = {\n  Mutation: {\n    sendEmail: async (_, { from, name, message }) => {\n      if (!from) throw new Error(\"No Email\");\n      if (!message) throw new Error(\"No Message\");\n      if (typeof name === 'undefined') name = '';\n\n      const messageConfig = {\n        to: 'kmurf1999@gmail.com',\n        from: hostEmail,\n        subject: `Work Email from ${name} - ${from}`,\n        body: message,\n        html: `<p>${message}</p>`,\n      };\n\n      const email = await new emailModel({\n        from,\n        to: messageConfig.from,\n        subject: messageConfig.subject,\n        name,\n        message,\n      });\n\n      await transporter.sendMail(messageConfig, (err, info) => {\n        if (err) throw new Error(\"Message Send Failure\");\n      });\n\n      return email.toGraph();\n    }\n  }\n};\n"],"file":"_mutation.js"}