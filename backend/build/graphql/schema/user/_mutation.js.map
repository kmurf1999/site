{"version":3,"sources":["../../../../graphql/schema/user/_mutation.js"],"names":["Mutation","gql","mutationTypes","mutationResolvers","signup","_","email","password","Error","usr","userModel","findOne","user","setPassword","save","toAuthJSON","login","validatePassword"],"mappings":";;;;;;;AACA;;AAEA;;;;AAEA,MAAMA,QAAQ,GAAGC,wBAAI;;;;;CAArB;;AAOO,MAAMC,aAAa,GAAG,MAAM,CAACF,QAAD,CAA5B;;;AAEA,MAAMG,iBAAiB,GAAG;AAC/BH,EAAAA,QAAQ,EAAE;AACRI,IAAAA,MAAM,EAAE,OAAOC,CAAP,EAAU;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAV,KAAkC;AACxC,UAAI,CAACD,KAAL,EAAY,MAAM,IAAIE,KAAJ,CAAU,UAAV,CAAN;AACZ,UAAI,CAACD,QAAL,EAAe,MAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AAEf,YAAMC,GAAG,GAAG,MAAMC,eAAUC,OAAV,CAAkB;AAAEL,QAAAA;AAAF,OAAlB,CAAlB;AAEA,UAAIG,GAAJ,EAAS,MAAM,IAAID,KAAJ,CAAU,QAAV,CAAN;AAET,YAAMI,IAAI,GAAG,MAAM,IAAIF,cAAJ,CAAc;AAAEJ,QAAAA;AAAF,OAAd,CAAnB;AACAM,MAAAA,IAAI,CAACC,WAAL,CAAiBN,QAAjB;AACAK,MAAAA,IAAI,CAACE,IAAL;AACA,aAAOF,IAAI,CAACG,UAAL,EAAP;AACD,KAbO;AAcRC,IAAAA,KAAK,EAAE,OAAOX,CAAP,EAAU;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAV,KAAkC;AACvC,UAAI,CAACD,KAAL,EAAY,MAAM,IAAIE,KAAJ,CAAU,UAAV,CAAN;AACZ,UAAI,CAACD,QAAL,EAAe,MAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AAEf,YAAMI,IAAI,GAAG,MAAMF,eAAUC,OAAV,CAAkB;AAAEL,QAAAA;AAAF,OAAlB,CAAnB;AAEA,UAAI,CAACM,IAAL,EAAW,MAAM,IAAIJ,KAAJ,CAAU,iBAAV,CAAN;AAEX,UAAI,CAACI,IAAI,CAACK,gBAAL,CAAsBV,QAAtB,CAAL,EACE,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AAEF,aAAOI,IAAI,CAACG,UAAL,EAAP;AACD;AA1BO;AADqB,CAA1B","sourcesContent":["\nimport { gql } from 'apollo-server-express';\n\nimport userModel from './_model';\n\nconst Mutation = gql`\n  extend type Mutation {\n    signup(email: String!, password: String!): AuthPayload\n    login(email: String!, password: String!): AuthPayload\n  }\n`;\n\nexport const mutationTypes = () => [Mutation];\n\nexport const mutationResolvers = {\n  Mutation: {\n    signup: async (_, { email, password }) => {\n      if (!email) throw new Error(\"No Email\");\n      if (!password) throw new Error(\"No Password\");\n\n      const usr = await userModel.findOne({ email });\n\n      if (usr) throw new Error(\"Exists\");\n\n      const user = await new userModel({ email });\n      user.setPassword(password);\n      user.save();\n      return user.toAuthJSON();\n    },\n    login: async (_, { email, password }) => {\n      if (!email) throw new Error(\"No Email\");\n      if (!password) throw new Error(\"No Password\");\n\n      const user = await userModel.findOne({ email });\n\n      if (!user) throw new Error(\"Incorrect Email\");\n\n      if (!user.validatePassword(password))\n        throw new Error(\"Incorrect Password\");\n\n      return user.toAuthJSON();\n    },\n\n  }\n};\n"],"file":"_mutation.js"}