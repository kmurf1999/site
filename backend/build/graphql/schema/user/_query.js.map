{"version":3,"sources":["../../../../graphql/schema/user/_query.js"],"names":["Query","gql","queryTypes","queryResolvers","users","_","filter","userModel","find","map","user","toGraph"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAEA,MAAMA,KAAK,GAAGC,wBAAI;;;;CAAlB;;AAMO,MAAMC,UAAU,GAAG,MAAM,CAACF,KAAD,CAAzB;;;AAEA,MAAMG,cAAc,GAAG;AAC5BH,EAAAA,KAAK,EAAE;AACLI,IAAAA,KAAK,EAAE,OAAOC,CAAP,EAAU;AAAEC,MAAAA,MAAM,GAAG;AAAX,KAAV,KAA8B;AACnC,YAAMF,KAAK,GAAG,MAAMG,eAAUC,IAAV,CAAe,EAAf,EAAmB,IAAnB,EAAyBF,MAAzB,CAApB;AACA,aAAOF,KAAK,CAACK,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACC,OAAL,EAAlB,CAAP;AACD;AAJI;AADqB,CAAvB","sourcesContent":["import { gql } from 'apollo-server-express';\n\nimport userModel from './_model';\n\nconst Query = gql`\n  extend type Query {\n    users(filter: usersFilterInput): [User] @requireAuth(role: ADMIN)\n  }\n`;\n\nexport const queryTypes = () => [Query];\n\nexport const queryResolvers = {\n  Query: {\n    users: async (_, { filter = {} }) => {\n      const users = await userModel.find({}, null, filter);\n      return users.map(user => user.toGraph());\n    }\n  }\n};\n"],"file":"_query.js"}