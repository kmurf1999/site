{"version":3,"sources":["../../../../graphql/schema/user/_model.js"],"names":["jwtSecret","process","env","JWT_SECRET","userSchema","mongoose","Schema","email","type","String","required","sparse","unique","hash","salt","role","enum","default","created_at","Date","updated_at","pre","save","next","currentDate","method","setPassword","password","crypto","randomBytes","toString","pbkdf2Sync","validatePassword","generateJWT","today","expirationDate","setDate","getDate","jwt","sign","id","_id","exp","parseInt","getTime","toAuthJSON","user","toGraph","token","set","virtuals","JSON","parse","stringify","model"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport crypto from 'crypto';\nimport jwt from 'jsonwebtoken';\n\nconst jwtSecret = process.env.JWT_SECRET;\n\nconst userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: true,\n    sparse: true,\n    unique: true,\n  },\n\n  hash: String,\n  salt: String,\n\n  role: {\n    type: String,\n    enum: ['USER', 'ADMIN'],\n    default: 'USER',\n  },\n\n  created_at: {\n    type: Date,\n    default: new Date(),\n  },\n\n  updated_at: {\n    type: Date,\n    default: new Date(),\n  }\n});\n\nuserSchema.pre('save', function save(next) {\n  // get the current date\n  const currentDate = new Date();\n  // change the updated_at field to current date\n  this.updated_at = currentDate;\n  // if created_at doesn't exist, add to that field\n  if (!this.created_at) this.created_at = currentDate;\n  next();\n});\n\nuserSchema.method('setPassword', function setPassword(password) {\n  this.salt = crypto.randomBytes(16).toString('hex');\n  this.hash = crypto.pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').toString('hex');\n});\n\nuserSchema.method('validatePassword', function validatePassword(password) {\n  const hash = crypto.pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').toString('hex');\n  return this.hash === hash;\n});\n\nuserSchema.method('generateJWT', function generateJWT() {\n  const today = new Date();\n  const expirationDate = new Date(today);\n  expirationDate.setDate(today.getDate() + 60);\n\n  return jwt.sign(\n    {\n      email: this.email,\n      id: this._id,\n      exp: parseInt(expirationDate.getTime() / 1000, 10),\n    },\n    jwtSecret,\n  );\n});\n\nuserSchema.method('toAuthJSON', function toAuthJSON() {\n  return {\n    user: this.toGraph(),\n    token: this.generateJWT()\n  };\n});\n\n/**\n * This property will ensure our virtuals (including \"id\")\n * are set on the user when we use it.\n */\nuserSchema.set('toObject', { virtuals: true });\n\n/**\n * Used for returning user object to graphql\n */\nuserSchema.method('toGraph', function toGraph() {\n  return JSON.parse(JSON.stringify(this));\n});\n\nexport default mongoose.model('User', userSchema);\n"],"file":"_model.js"}