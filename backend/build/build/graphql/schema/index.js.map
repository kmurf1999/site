{"version":3,"sources":["../../../graphql/schema/index.js"],"names":["Object","defineProperty","exports","value","default","_fs","_interopRequireDefault","require","_path","_apolloServerExpress","_lodash","_jsonwebtoken","_model","obj","__esModule","jwtSecret","process","env","JWT_SECRET","RequireAuthDirective","SchemaDirectiveVisitor","visitFieldDefinition","field","resolve","defaultFieldResolver","role","args","ctx","req","headers","authorization","token","decoded","split","verify","e","AuthenticationError","user","findById","id","includes","result","apply","Auth","gql","Query","Mutation","resolvers","status","typeDefs","readdirSync","__dirname","filter","dir","indexOf","forEach","tmp","join","merge","push","types","schema","ApolloServer","schemaDirectives","requireAuth","context","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _apolloServerExpress = require(\"apollo-server-express\");\n\nvar _lodash = require(\"lodash\");\n\nvar _jsonwebtoken = _interopRequireDefault(require(\"jsonwebtoken\"));\n\nvar _model = _interopRequireDefault(require(\"./user/_model\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst jwtSecret = process.env.JWT_SECRET;\n\nclass RequireAuthDirective extends _apolloServerExpress.SchemaDirectiveVisitor {\n  visitFieldDefinition(field) {\n    const {\n      resolve = defaultFieldResolver\n    } = field;\n    const {\n      role\n    } = this.args;\n\n    field.resolve = async function (...args) {\n      const [,, ctx] = args;\n\n      if (ctx.req && ctx.req.headers.authorization) {\n        let token;\n        let decoded;\n\n        try {\n          token = ctx.req.headers.authorization.split(\" \")[1];\n          decoded = _jsonwebtoken.default.verify(token, jwtSecret);\n        } catch (e) {\n          throw new _apolloServerExpress.AuthenticationError(\"You must be signed in to view this resource.\");\n        }\n\n        const user = await _model.default.findById(decoded.id);\n\n        if (role && (!user.role || !user.role.includes(role))) {\n          throw new _apolloServerExpress.AuthenticationError(\"You are not authorized to view this resource.\");\n        } else {\n          const result = await resolve.apply(this, args);\n          return result;\n        }\n      } else {\n        throw new _apolloServerExpress.AuthenticationError(\"You must be signed in to view this resource.\");\n      }\n    };\n  }\n\n}\n\nconst Auth = _apolloServerExpress.gql`\n  directive @requireAuth(role: Role) on FIELD_DEFINITION\n  enum Role {\n    ADMIN\n    USER\n  }\n`;\nconst Query = _apolloServerExpress.gql`\n  type Query {\n    status: String\n  }\n`;\nconst Mutation = _apolloServerExpress.gql`\n  type Mutation {\n    _empty: String\n  }\n`;\nlet resolvers = {\n  Query: {\n    status: () => 'ok'\n  }\n};\nconst typeDefs = [Query, Mutation, Auth]; // read the current directory and load types and resolvers automatically\n\n_fs.default.readdirSync(__dirname).filter(dir => dir.indexOf('.') < 0).forEach(dir => {\n  const tmp = require(_path.default.join(__dirname, dir)).default;\n\n  resolvers = (0, _lodash.merge)(resolvers, tmp.resolvers);\n  typeDefs.push(tmp.types);\n});\n\nconst schema = new _apolloServerExpress.ApolloServer({\n  typeDefs,\n  resolvers,\n  schemaDirectives: {\n    requireAuth: RequireAuthDirective\n  },\n  context: ({\n    req\n  }) => ({\n    req\n  })\n});\nvar _default = schema;\nexports.default = _default;"],"file":"index.js"}