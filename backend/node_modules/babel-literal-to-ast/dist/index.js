'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = astify;

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

var _babylon = require('babylon');

var babylon = _interopRequireWildcard(_babylon);

var _babelTraverse = require('babel-traverse');

var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function astify(literal) {
  if (literal === null) {
    return t.nullLiteral();
  }
  switch (typeof literal === 'undefined' ? 'undefined' : _typeof(literal)) {
    case 'function':
      var ast = babylon.parse(literal.toString(), {
        allowReturnOutsideFunction: true,
        allowSuperOutsideMethod: true
      });
      return _babelTraverse2.default.removeProperties(ast);
    case 'number':
      return t.numericLiteral(literal);
    case 'string':
      return t.stringLiteral(literal);
    case 'boolean':
      return t.booleanLiteral(literal);
    case 'undefined':
      return t.unaryExpression('void', t.numberLiteral(0), true);
    default:
      if (Array.isArray(literal)) {
        return t.arrayExpression(literal.map(astify));
      }
      return t.objectExpression(Object.keys(literal).filter(function (k) {
        return typeof literal[k] !== 'undefined';
      }).map(function (k) {
        return t.objectProperty(t.stringLiteral(k), astify(literal[k]));
      }));
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztrQkFLd0IsTUFBTTs7OztJQUpsQixDQUFDOzs7O0lBQ0QsT0FBTzs7Ozs7Ozs7Ozs7O0FBR0osU0FBUyxNQUFNLENBQUMsT0FBTyxFQUFFO0FBQ3RDLE1BQUksT0FBTyxLQUFLLElBQUksRUFBRTtBQUNwQixXQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUN4QjtBQUNELGlCQUFlLE9BQU8seUNBQVAsT0FBTztBQUN0QixTQUFLLFVBQVU7QUFDYixVQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRTtBQUM1QyxrQ0FBMEIsRUFBRSxJQUFJO0FBQ2hDLCtCQUF1QixFQUFFLElBQUk7T0FDOUIsQ0FBQyxDQUFDO0FBQ0gsYUFBTyx3QkFBUyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUFBLEFBQ3hDLFNBQUssUUFBUTtBQUNYLGFBQU8sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUFBLEFBQ25DLFNBQUssUUFBUTtBQUNYLGFBQU8sQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUFBLEFBQ2xDLFNBQUssU0FBUztBQUNaLGFBQU8sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUFBLEFBQ25DLFNBQUssV0FBVztBQUNkLGFBQU8sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUFBLEFBQzdEO0FBQ0UsVUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQzFCLGVBQU8sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7T0FDL0M7QUFDRCxhQUFPLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUMzQyxNQUFNLENBQUMsVUFBQSxDQUFDLEVBQUk7QUFDWCxlQUFPLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLFdBQVcsQ0FBQztPQUMxQyxDQUFDLENBQ0QsR0FBRyxDQUFDLFVBQUEsQ0FBQyxFQUFJO0FBQ1IsZUFBTyxDQUFDLENBQUMsY0FBYyxDQUNyQixDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUNsQixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ25CLENBQUM7T0FDSCxDQUFDLENBQUMsQ0FBQztBQUFBLEdBQ1A7Q0FDRiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0ICogYXMgdCBmcm9tICdiYWJlbC10eXBlcyc7XG5pbXBvcnQgKiBhcyBiYWJ5bG9uIGZyb20gJ2JhYnlsb24nO1xuaW1wb3J0IHRyYXZlcnNlIGZyb20gJ2JhYmVsLXRyYXZlcnNlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXN0aWZ5KGxpdGVyYWwpIHtcbiAgaWYgKGxpdGVyYWwgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdC5udWxsTGl0ZXJhbCgpO1xuICB9XG4gIHN3aXRjaCAodHlwZW9mIGxpdGVyYWwpIHtcbiAgY2FzZSAnZnVuY3Rpb24nOlxuICAgIGNvbnN0IGFzdCA9IGJhYnlsb24ucGFyc2UobGl0ZXJhbC50b1N0cmluZygpLCB7XG4gICAgICBhbGxvd1JldHVybk91dHNpZGVGdW5jdGlvbjogdHJ1ZSxcbiAgICAgIGFsbG93U3VwZXJPdXRzaWRlTWV0aG9kOiB0cnVlLFxuICAgIH0pO1xuICAgIHJldHVybiB0cmF2ZXJzZS5yZW1vdmVQcm9wZXJ0aWVzKGFzdCk7XG4gIGNhc2UgJ251bWJlcic6XG4gICAgcmV0dXJuIHQubnVtZXJpY0xpdGVyYWwobGl0ZXJhbCk7XG4gIGNhc2UgJ3N0cmluZyc6XG4gICAgcmV0dXJuIHQuc3RyaW5nTGl0ZXJhbChsaXRlcmFsKTtcbiAgY2FzZSAnYm9vbGVhbic6XG4gICAgcmV0dXJuIHQuYm9vbGVhbkxpdGVyYWwobGl0ZXJhbCk7XG4gIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgcmV0dXJuIHQudW5hcnlFeHByZXNzaW9uKCd2b2lkJywgdC5udW1iZXJMaXRlcmFsKDApLCB0cnVlKTtcbiAgZGVmYXVsdDpcbiAgICBpZiAoQXJyYXkuaXNBcnJheShsaXRlcmFsKSkge1xuICAgICAgcmV0dXJuIHQuYXJyYXlFeHByZXNzaW9uKGxpdGVyYWwubWFwKGFzdGlmeSkpO1xuICAgIH1cbiAgICByZXR1cm4gdC5vYmplY3RFeHByZXNzaW9uKE9iamVjdC5rZXlzKGxpdGVyYWwpXG4gICAgICAuZmlsdGVyKGsgPT4ge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGxpdGVyYWxba10gIT09ICd1bmRlZmluZWQnO1xuICAgICAgfSlcbiAgICAgIC5tYXAoayA9PiB7XG4gICAgICAgIHJldHVybiB0Lm9iamVjdFByb3BlcnR5KFxuICAgICAgICAgIHQuc3RyaW5nTGl0ZXJhbChrKSxcbiAgICAgICAgICBhc3RpZnkobGl0ZXJhbFtrXSlcbiAgICAgICAgKTtcbiAgICAgIH0pKTtcbiAgfVxufVxuIl19